use crate::token::TokenType;
use std::fmt;

#[derive(Clone, Debug)]
pub struct Node<T> {
  n_type: NodeType,
  data: Vec<T>,
  children: Vec<Node<T>>,
}

impl<T> Node<T> {
  pub fn new(node_type: NodeType) -> Node<T> {
    Node {
      n_type: node_type,
      data: vec![],
      children: vec![],
    }
  }

  pub fn add_child(&mut self, child: Node<T>) {
    self.children.push(child)
  }

  pub fn get_data(&self) -> &Vec<T> {
    &self.data
  }

  pub fn get_first_data_result(&self) -> &T {
    &self.data.get(0).expect("No data found in node")
  }

  pub fn get_first_child(&self) -> &Node<T> {
    &self.children.get(0).expect("No children found in node")
  }

  pub fn get_type(&self) -> &NodeType {
    &self.n_type
  }

  pub fn get_children(&self) -> &Vec<Node<T>> {
    &self.children
  }
}

impl Node<String> {
  pub fn add_data(&mut self, data: &String) {
    self.data.push(data.to_owned())
  }

  fn format_self(&self, count: usize) -> String {
    let mut tabs = String::new();
    for _ in 0..count {
      tabs.push_str("  ");
    }
    let mut return_str = format!(
      "{}type: {:?} | data: \"{}\"\n",
      tabs,
      self.n_type,
      self.data.join(", ")
    );
    for child in self.children.iter() {
      return_str.push_str(&child.format_self(count + 1));
    }
    return_str
  }
}

impl fmt::Display for Node<String> {
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    write!(f, "{}", self.format_self(0))
  }
}

#[derive(Clone, Debug, PartialEq, Eq)]
pub enum NodeType {
  Program,
  OpcodeStatement,
  AssignmentStatement,
  DirectiveStatement,
  LabelStatement,
  Variable,
  Number,
  String,
  Label,
  LocalLabel,
  UnnamedLabel,
  AccumulatorMode,
  ImmediateMode,
  DirectMode,
  DirectRegXMode,
  DirectRegYMode,
  IndirectXMode,
  IndirectYMode,
  BinaryOp,
  UnaryOp,
  LabelJump,
  DirArgs,
  DirectiveA16,
  DirectiveA8,
  DirectiveAddr,
  DirectiveAddrsize,
  DirectiveAlign,
  DirectiveAnd,
  DirectiveAsciiz,
  DirectiveAsize,
  DirectiveAssert,
  DirectiveAutoimport,
  DirectiveBank,
  DirectiveBankbyte,
  DirectiveBankbytes,
  DirectiveBitand,
  DirectiveBitnot,
  DirectiveBitor,
  DirectiveBitxor,
  DirectiveBlank,
  DirectiveBss,
  DirectiveByt,
  DirectiveByte,
  DirectiveCase,
  DirectiveCharmap,
  DirectiveCode,
  DirectiveConcat,
  DirectiveCondes,
  DirectiveConst,
  DirectiveConstructor,
  DirectiveCpu,
  DirectiveData,
  DirectiveDbg,
  DirectiveDbyt,
  DirectiveDebuginfo,
  DirectiveDef,
  DirectiveDefine,
  DirectiveDefined,
  DirectiveDefinedmacro,
  DirectiveDelmac,
  DirectiveDelmacro,
  DirectiveDestructor,
  DirectiveDword,
  DirectiveElse,
  DirectiveElseif,
  DirectiveEnd,
  DirectiveEndenum,
  DirectiveEndif,
  DirectiveEndmac,
  DirectiveEndmacro,
  DirectiveEndproc,
  DirectiveEndrep,
  DirectiveEndrepeat,
  DirectiveEndscope,
  DirectiveEndstruct,
  DirectiveEndunion,
  DirectiveEnum,
  DirectiveError,
  DirectiveExitmac,
  DirectiveExitmacro,
  DirectiveExport,
  DirectiveExportzp,
  DirectiveFaraddr,
  DirectiveFatal,
  DirectiveFeature,
  DirectiveFileopt,
  DirectiveFopt,
  DirectiveForceimport,
  DirectiveForceword,
  DirectiveGlobal,
  DirectiveGlobalzp,
  DirectiveHibyte,
  DirectiveHibytes,
  DirectiveHiword,
  DirectiveI16,
  DirectiveI8,
  DirectiveIdent,
  DirectiveIf,
  DirectiveIfblank,
  DirectiveIfconst,
  DirectiveIfdef,
  DirectiveIfnblank,
  DirectiveIfnconst,
  DirectiveIfndef,
  DirectiveIfnref,
  DirectiveIfp02,
  DirectiveIfp4510,
  DirectiveIfp816,
  DirectiveIfpc02,
  DirectiveIfpsc02,
  DirectiveIfref,
  DirectiveImport,
  DirectiveImportzp,
  DirectiveIncbin,
  DirectiveInclude,
  DirectiveInterruptor,
  DirectiveIsize,
  DirectiveIsmnem,
  DirectiveIsmnemonic,
  DirectiveLeft,
  DirectiveLinecont,
  DirectiveList,
  DirectiveListbytes,
  DirectiveLobyte,
  DirectiveLobytes,
  DirectiveLocal,
  DirectiveLocalchar,
  DirectiveLoword,
  DirectiveMac,
  DirectiveMacpack,
  DirectiveMacro,
  DirectiveMatch,
  DirectiveMax,
  DirectiveMid,
  DirectiveMin,
  DirectiveMod,
  DirectiveNot,
  DirectiveNull,
  DirectiveOr,
  DirectiveOrg,
  DirectiveOut,
  DirectiveP02,
  DirectiveP4510,
  DirectiveP816,
  DirectivePagelen,
  DirectivePagelength,
  DirectiveParamcount,
  DirectivePc02,
  DirectivePopcpu,
  DirectivePopseg,
  DirectiveProc,
  DirectivePsc02,
  DirectivePushcpu,
  DirectivePushseg,
  DirectiveRef,
  DirectiveReferenced,
  DirectiveReloc,
  DirectiveRepeat,
  DirectiveRes,
  DirectiveRight,
  DirectiveRodata,
  DirectiveScope,
  DirectiveSegment,
  DirectiveSet,
  DirectiveSetcpu,
  DirectiveShl,
  DirectiveShr,
  DirectiveSizeof,
  DirectiveSmart,
  DirectiveSprintf,
  DirectiveStrat,
  DirectiveString,
  DirectiveStrlen,
  DirectiveStruct,
  DirectiveTag,
  DirectiveTcount,
  DirectiveTime,
  DirectiveUndef,
  DirectiveUndefine,
  DirectiveUnion,
  DirectiveVersion,
  DirectiveWarning,
  DirectiveWord,
  DirectiveXmatch,
  DirectiveXor,
  DirectiveZeropage,
}

impl NodeType {
  pub fn from_token_type(t: &TokenType) -> NodeType {
    match t {
      TokenType::DirectiveA16 => NodeType::DirectiveA16,
      TokenType::DirectiveA8 => NodeType::DirectiveA8,
      TokenType::DirectiveAddr => NodeType::DirectiveAddr,
      TokenType::DirectiveAddrsize => NodeType::DirectiveAddrsize,
      TokenType::DirectiveAlign => NodeType::DirectiveAlign,
      TokenType::DirectiveAnd => NodeType::DirectiveAnd,
      TokenType::DirectiveAsciiz => NodeType::DirectiveAsciiz,
      TokenType::DirectiveAsize => NodeType::DirectiveAsize,
      TokenType::DirectiveAssert => NodeType::DirectiveAssert,
      TokenType::DirectiveAutoimport => NodeType::DirectiveAutoimport,
      TokenType::DirectiveBank => NodeType::DirectiveBank,
      TokenType::DirectiveBankbyte => NodeType::DirectiveBankbyte,
      TokenType::DirectiveBankbytes => NodeType::DirectiveBankbytes,
      TokenType::DirectiveBitand => NodeType::DirectiveBitand,
      TokenType::DirectiveBitnot => NodeType::DirectiveBitnot,
      TokenType::DirectiveBitor => NodeType::DirectiveBitor,
      TokenType::DirectiveBitxor => NodeType::DirectiveBitxor,
      TokenType::DirectiveBlank => NodeType::DirectiveBlank,
      TokenType::DirectiveBss => NodeType::DirectiveBss,
      TokenType::DirectiveByt => NodeType::DirectiveByt,
      TokenType::DirectiveByte => NodeType::DirectiveByte,
      TokenType::DirectiveCase => NodeType::DirectiveCase,
      TokenType::DirectiveCharmap => NodeType::DirectiveCharmap,
      TokenType::DirectiveCode => NodeType::DirectiveCode,
      TokenType::DirectiveConcat => NodeType::DirectiveConcat,
      TokenType::DirectiveCondes => NodeType::DirectiveCondes,
      TokenType::DirectiveConst => NodeType::DirectiveConst,
      TokenType::DirectiveConstructor => NodeType::DirectiveConstructor,
      TokenType::DirectiveCpu => NodeType::DirectiveCpu,
      TokenType::DirectiveData => NodeType::DirectiveData,
      TokenType::DirectiveDbg => NodeType::DirectiveDbg,
      TokenType::DirectiveDbyt => NodeType::DirectiveDbyt,
      TokenType::DirectiveDebuginfo => NodeType::DirectiveDebuginfo,
      TokenType::DirectiveDef => NodeType::DirectiveDef,
      TokenType::DirectiveDefine => NodeType::DirectiveDefine,
      TokenType::DirectiveDefined => NodeType::DirectiveDefined,
      TokenType::DirectiveDefinedmacro => NodeType::DirectiveDefinedmacro,
      TokenType::DirectiveDelmac => NodeType::DirectiveDelmac,
      TokenType::DirectiveDelmacro => NodeType::DirectiveDelmacro,
      TokenType::DirectiveDestructor => NodeType::DirectiveDestructor,
      TokenType::DirectiveDword => NodeType::DirectiveDword,
      TokenType::DirectiveElse => NodeType::DirectiveElse,
      TokenType::DirectiveElseif => NodeType::DirectiveElseif,
      TokenType::DirectiveEnd => NodeType::DirectiveEnd,
      TokenType::DirectiveEndenum => NodeType::DirectiveEndenum,
      TokenType::DirectiveEndif => NodeType::DirectiveEndif,
      TokenType::DirectiveEndmac => NodeType::DirectiveEndmac,
      TokenType::DirectiveEndmacro => NodeType::DirectiveEndmacro,
      TokenType::DirectiveEndproc => NodeType::DirectiveEndproc,
      TokenType::DirectiveEndrep => NodeType::DirectiveEndrep,
      TokenType::DirectiveEndrepeat => NodeType::DirectiveEndrepeat,
      TokenType::DirectiveEndscope => NodeType::DirectiveEndscope,
      TokenType::DirectiveEndstruct => NodeType::DirectiveEndstruct,
      TokenType::DirectiveEndunion => NodeType::DirectiveEndunion,
      TokenType::DirectiveEnum => NodeType::DirectiveEnum,
      TokenType::DirectiveError => NodeType::DirectiveError,
      TokenType::DirectiveExitmac => NodeType::DirectiveExitmac,
      TokenType::DirectiveExitmacro => NodeType::DirectiveExitmacro,
      TokenType::DirectiveExport => NodeType::DirectiveExport,
      TokenType::DirectiveExportzp => NodeType::DirectiveExportzp,
      TokenType::DirectiveFaraddr => NodeType::DirectiveFaraddr,
      TokenType::DirectiveFatal => NodeType::DirectiveFatal,
      TokenType::DirectiveFeature => NodeType::DirectiveFeature,
      TokenType::DirectiveFileopt => NodeType::DirectiveFileopt,
      TokenType::DirectiveFopt => NodeType::DirectiveFopt,
      TokenType::DirectiveForceimport => NodeType::DirectiveForceimport,
      TokenType::DirectiveForceword => NodeType::DirectiveForceword,
      TokenType::DirectiveGlobal => NodeType::DirectiveGlobal,
      TokenType::DirectiveGlobalzp => NodeType::DirectiveGlobalzp,
      TokenType::DirectiveHibyte => NodeType::DirectiveHibyte,
      TokenType::DirectiveHibytes => NodeType::DirectiveHibytes,
      TokenType::DirectiveHiword => NodeType::DirectiveHiword,
      TokenType::DirectiveI16 => NodeType::DirectiveI16,
      TokenType::DirectiveI8 => NodeType::DirectiveI8,
      TokenType::DirectiveIdent => NodeType::DirectiveIdent,
      TokenType::DirectiveIf => NodeType::DirectiveIf,
      TokenType::DirectiveIfblank => NodeType::DirectiveIfblank,
      TokenType::DirectiveIfconst => NodeType::DirectiveIfconst,
      TokenType::DirectiveIfdef => NodeType::DirectiveIfdef,
      TokenType::DirectiveIfnblank => NodeType::DirectiveIfnblank,
      TokenType::DirectiveIfnconst => NodeType::DirectiveIfnconst,
      TokenType::DirectiveIfndef => NodeType::DirectiveIfndef,
      TokenType::DirectiveIfnref => NodeType::DirectiveIfnref,
      TokenType::DirectiveIfp02 => NodeType::DirectiveIfp02,
      TokenType::DirectiveIfp4510 => NodeType::DirectiveIfp4510,
      TokenType::DirectiveIfp816 => NodeType::DirectiveIfp816,
      TokenType::DirectiveIfpc02 => NodeType::DirectiveIfpc02,
      TokenType::DirectiveIfpsc02 => NodeType::DirectiveIfpsc02,
      TokenType::DirectiveIfref => NodeType::DirectiveIfref,
      TokenType::DirectiveImport => NodeType::DirectiveImport,
      TokenType::DirectiveImportzp => NodeType::DirectiveImportzp,
      TokenType::DirectiveIncbin => NodeType::DirectiveIncbin,
      TokenType::DirectiveInclude => NodeType::DirectiveInclude,
      TokenType::DirectiveInterruptor => NodeType::DirectiveInterruptor,
      TokenType::DirectiveIsize => NodeType::DirectiveIsize,
      TokenType::DirectiveIsmnem => NodeType::DirectiveIsmnem,
      TokenType::DirectiveIsmnemonic => NodeType::DirectiveIsmnemonic,
      TokenType::DirectiveLeft => NodeType::DirectiveLeft,
      TokenType::DirectiveLinecont => NodeType::DirectiveLinecont,
      TokenType::DirectiveList => NodeType::DirectiveList,
      TokenType::DirectiveListbytes => NodeType::DirectiveListbytes,
      TokenType::DirectiveLobyte => NodeType::DirectiveLobyte,
      TokenType::DirectiveLobytes => NodeType::DirectiveLobytes,
      TokenType::DirectiveLocal => NodeType::DirectiveLocal,
      TokenType::DirectiveLocalchar => NodeType::DirectiveLocalchar,
      TokenType::DirectiveLoword => NodeType::DirectiveLoword,
      TokenType::DirectiveMac => NodeType::DirectiveMac,
      TokenType::DirectiveMacpack => NodeType::DirectiveMacpack,
      TokenType::DirectiveMacro => NodeType::DirectiveMacro,
      TokenType::DirectiveMatch => NodeType::DirectiveMatch,
      TokenType::DirectiveMax => NodeType::DirectiveMax,
      TokenType::DirectiveMid => NodeType::DirectiveMid,
      TokenType::DirectiveMin => NodeType::DirectiveMin,
      TokenType::DirectiveMod => NodeType::DirectiveMod,
      TokenType::DirectiveNot => NodeType::DirectiveNot,
      TokenType::DirectiveNull => NodeType::DirectiveNull,
      TokenType::DirectiveOr => NodeType::DirectiveOr,
      TokenType::DirectiveOrg => NodeType::DirectiveOrg,
      TokenType::DirectiveOut => NodeType::DirectiveOut,
      TokenType::DirectiveP02 => NodeType::DirectiveP02,
      TokenType::DirectiveP4510 => NodeType::DirectiveP4510,
      TokenType::DirectiveP816 => NodeType::DirectiveP816,
      TokenType::DirectivePagelen => NodeType::DirectivePagelen,
      TokenType::DirectivePagelength => NodeType::DirectivePagelength,
      TokenType::DirectiveParamcount => NodeType::DirectiveParamcount,
      TokenType::DirectivePc02 => NodeType::DirectivePc02,
      TokenType::DirectivePopcpu => NodeType::DirectivePopcpu,
      TokenType::DirectivePopseg => NodeType::DirectivePopseg,
      TokenType::DirectiveProc => NodeType::DirectiveProc,
      TokenType::DirectivePsc02 => NodeType::DirectivePsc02,
      TokenType::DirectivePushcpu => NodeType::DirectivePushcpu,
      TokenType::DirectivePushseg => NodeType::DirectivePushseg,
      TokenType::DirectiveRef => NodeType::DirectiveRef,
      TokenType::DirectiveReferenced => NodeType::DirectiveReferenced,
      TokenType::DirectiveReloc => NodeType::DirectiveReloc,
      TokenType::DirectiveRepeat => NodeType::DirectiveRepeat,
      TokenType::DirectiveRes => NodeType::DirectiveRes,
      TokenType::DirectiveRight => NodeType::DirectiveRight,
      TokenType::DirectiveRodata => NodeType::DirectiveRodata,
      TokenType::DirectiveScope => NodeType::DirectiveScope,
      TokenType::DirectiveSegment => NodeType::DirectiveSegment,
      TokenType::DirectiveSet => NodeType::DirectiveSet,
      TokenType::DirectiveSetcpu => NodeType::DirectiveSetcpu,
      TokenType::DirectiveShl => NodeType::DirectiveShl,
      TokenType::DirectiveShr => NodeType::DirectiveShr,
      TokenType::DirectiveSizeof => NodeType::DirectiveSizeof,
      TokenType::DirectiveSmart => NodeType::DirectiveSmart,
      TokenType::DirectiveSprintf => NodeType::DirectiveSprintf,
      TokenType::DirectiveStrat => NodeType::DirectiveStrat,
      TokenType::DirectiveString => NodeType::DirectiveString,
      TokenType::DirectiveStrlen => NodeType::DirectiveStrlen,
      TokenType::DirectiveStruct => NodeType::DirectiveStruct,
      TokenType::DirectiveTag => NodeType::DirectiveTag,
      TokenType::DirectiveTcount => NodeType::DirectiveTcount,
      TokenType::DirectiveTime => NodeType::DirectiveTime,
      TokenType::DirectiveUndef => NodeType::DirectiveUndef,
      TokenType::DirectiveUndefine => NodeType::DirectiveUndefine,
      TokenType::DirectiveUnion => NodeType::DirectiveUnion,
      TokenType::DirectiveVersion => NodeType::DirectiveVersion,
      TokenType::DirectiveWarning => NodeType::DirectiveWarning,
      TokenType::DirectiveWord => NodeType::DirectiveWord,
      TokenType::DirectiveXmatch => NodeType::DirectiveXmatch,
      TokenType::DirectiveXor => NodeType::DirectiveXor,
      TokenType::DirectiveZeropage => NodeType::DirectiveZeropage,
      _ => panic!("Not a directive {:?}", t),
    }
  }
}
